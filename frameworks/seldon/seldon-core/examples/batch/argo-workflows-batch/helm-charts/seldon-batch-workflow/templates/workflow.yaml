---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  {{- if eq .Values.workflow.useNameAsGenerateName false }}
  name: {{ .Values.workflow.name }}
  {{- else }}
  generateName: {{ .Values.workflow.name }}
  {{- end }}
  namespace: {{ .Values.workflow.namespace }}
spec:
  entrypoint: seldon-batch-process
  volumeClaimTemplates:
  - metadata:
      name: "{{ .Values.pvc.name }}"
      ownerReferences:
      - apiVersion: argoproj.io/v1alpha1
        blockOwnerDeletion: true
        kind: Workflow
        name: "{{`{{workflow.name}}`}}"
        uid: "{{`{{workflow.uid}}`}}"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ .Values.pvc.storage }}"
  volumes:
  - name: rclone-config
    secret:
      secretName: "{{ .Values.rclone.configSecretName }}"
  templates:
  - name: seldon-batch-process
    steps:
    - - name: create-seldon-resource
        template: create-seldon-resource-template
    - - name: wait-seldon-resource
        template: wait-seldon-resource-template
    - - name: download-object-store
        template: download-object-store-template
    - - name: process-batch-inputs
        template: process-batch-inputs-template
    - - name: upload-object-store
        template: upload-object-store-template
    - - name: delete-seldon-resource
        template: delete-seldon-resource-template

  - name: create-seldon-resource-template
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    resource:
      action: create
      manifest: |
        apiVersion: machinelearning.seldon.io/v1
        kind: SeldonDeployment
        metadata:
          name: "{{ .Values.seldonDeployment.name }}"
          namespace: {{ .Values.workflow.namespace }}
          ownerReferences:
          - apiVersion: argoproj.io/v1alpha1
            blockOwnerDeletion: true
            kind: Workflow
            name: "{{`{{workflow.name}}`}}"
            uid: "{{`{{workflow.uid}}`}}"
        spec:
          name: "{{ .Values.seldonDeployment.name }}"
          predictors:
            - componentSpecs:
              - spec:
                  containers:
                  - name: classifier
                    env:
                    - name: GUNICORN_THREADS
                      value: "{{ .Values.seldonDeployment.serverThreads }}"
                    - name: GUNICORN_WORKERS
                      value: "{{ .Values.seldonDeployment.serverWorkers }}"
                    resources:
                      requests:
                        cpu: {{ .Values.seldonDeployment.requests.cpu }}
                        memory: {{ .Values.seldonDeployment.requests.memory }}
                      limits:
                        cpu: {{ .Values.seldonDeployment.limits.cpu }}
                        memory: {{ .Values.seldonDeployment.limits.memory }}
              graph:
                children: []
                implementation: {{ .Values.seldonDeployment.server }}
                modelUri: {{ .Values.seldonDeployment.modelUri }}
                name: classifier
              name: default
              replicas: {{ .Values.seldonDeployment.replicas }}

  - name: wait-seldon-resource-template
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    script:
      image: bitnami/kubectl:1.17
      command: [bash]
      source: |
        sleep {{ .Values.seldonDeployment.waitTime }}
        kubectl rollout status \
            deploy/$(kubectl get deploy -l seldon-deployment-id="{{ .Values.seldonDeployment.name }}" -o jsonpath='{.items[0].metadata.name}')

  - name: download-object-store-template
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    script:
      image: {{ .Values.rclone.image }}
      volumeMounts:
      - name: "{{ .Values.pvc.name }}"
        mountPath: /assets
      - name: rclone-config
        mountPath: /config/rclone
        readOnly: true
      command: [sh]
      source: |
        rclone copyto {{ .Values.rclone.inputDataPath }} /assets/input-data.txt

  - name: process-batch-inputs-template
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    script:
      image: {{ .Values.seldonDeployment.image }}
      volumeMounts:
      - name: "{{ .Values.pvc.name }}"
        mountPath: /assets
      command: [bash]
      source: |
        seldon-batch-processor \
            --deployment-name "{{ .Values.seldonDeployment.name }}" \
            {{- if eq .Values.batchWorker.enableBenchmark true }}
            --benchmark \
            {{- end }}
            --namespace "{{ .Values.workflow.namespace }}" \
            --host "{{ .Values.batchWorker.host }}" \
            --workers "{{ .Values.batchWorker.workers }}" \
            --data-type "{{ .Values.batchWorker.dataType }}" \
            --payload-type "{{ .Values.batchWorker.payloadType }}" \
            --retries "{{ .Values.batchWorker.retries }}" \
            --input-data-path "/assets/input-data.txt" \
            --output-data-path "/assets/output-data.txt"

  - name: upload-object-store-template
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    script:
      image: {{ .Values.rclone.image }}
      volumeMounts:
      - name: "{{ .Values.pvc.name }}"
        mountPath: /assets
      - name: rclone-config
        mountPath: /config/rclone
        readOnly: true
      command: [sh]
      source: |
        rclone copyto /assets/output-data.txt {{ .Values.rclone.outputDataPath }}


  - name: delete-seldon-resource-template
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    script:
      image: bitnami/kubectl:1.17
      command: [bash]
      source: |
        sleep {{ .Values.seldonDeployment.waitTime }}
        kubectl delete seldondeployments -n {{ .Values.workflow.namespace }}  {{ .Values.seldonDeployment.name }}
